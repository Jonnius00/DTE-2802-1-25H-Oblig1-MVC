namespace DTE_2802_1_25H_Oblig1_MVC.Models
{
  /// <summary>
  /// Represents a comment entity in the blogging system.
  /// This is the bottom-level entity - belongs to a post and contains user discussion.
  /// 
  /// Business Rules:
  /// - Each comment must belong to exactly one post (PostId is required)
  /// - Full CRUD operations are supported (requirement #4: CREATE, READ, UPDATE, DELETE)
  /// - Only the comment owner can edit or delete the comment
  /// - Comments can only be created on posts in "open" blogs
  /// - Content validation: comments cannot be null or empty (enforced by property setter)
  /// - All comments for a post are displayed together 
  /// 
  /// Entity Relationships:
  /// - Many Comments belong to one Post (N:1 relationship via PostId foreign key)
  /// - Navigation property: Post (parent)
  /// 
  /// </summary>
  public class Comment
    {
        /// <summary>
        /// 
        /// Primary key identifier for the comment.
        /// Auto-generated by Entity Framework when creating new comments.
        /// Used in routing ( /Comment/Edit/{id} ) and for CRUD operations.
        /// 
        /// </summary>
        public int Id { get; set; }

        /// <summary>
        /// 
        /// PRIVATE field for the publicc Content property.
        /// null content validation is always enforced through the public setter.
        /// Initialized to empty string to prevent null reference issues.
        /// 
        /// </summary>
        private string _content = string.Empty;

        /// <summary>
        /// 
        /// The text content of the comment.
        /// 
        /// Validation Rules:
        /// - Cannot be null, empty, or whitespace-only
        ///   ensures data integrity and prevents empty comments
        /// - Throws ArgumentException if invalid content is provided
        /// 
        /// Business Logic:
        /// - Displayed on post details page in chronological order
        /// 
        /// Implementation :
        /// - Uses property with validation rather than data annotations
        /// - Immediate validation on assignment prevents invalid state
        /// - Exception handling should be implemented in UI layer ( NOT IMPLEMENTED )
        /// 
        /// </summary>
        public string Content
            {
                get => _content;
                set
                {
                    if ( string.IsNullOrWhiteSpace(value) )
                    {
                        throw new ArgumentException("Content cannot be null or empty.");
                    }
                    _content = value;
                }
            }

        /// <summary>
        /// 
        /// Required field - every comment must belong to exactly one post.
        /// 
        /// Business Logic:
        /// - Used to group comments by post for display
        /// - Enforces blog open/close restrictions ( checked via post.Blog.IsOpen )
        /// 
        /// Database Relationship:
        /// - References Post.Id as foreign key
        /// - Cascade delete: if post is deleted, all comments are deleted
        /// 
        /// </summary>
        public int PostId { get; set; }

        /// <summary>
        /// 
        /// Navigation property to access the parent post of this comment.
        /// Entity Framework uses this for relationship navigation and eager loading.
        /// 
        /// Business Applications ( NOT IMLEMENTED YET ):
        /// - Used in comment controllers to verify blog open/close status
        /// - Enables breadcrumb navigation (Blog → Post → Comment)
        /// - Supports authorization checks at the blog level
        /// - Nullable - allows lazy loading where post data isn't immediately needed
        /// 
        /// </summary>
        public Post? Post { get; set; }

        /// <summary>
        /// 
        /// Identifier of the user who created this comment.
        /// Links to ASP.NET Core Identity User.Id for ownership tracking.
        /// 
        /// Business Rules:
        /// - Set automatically when authenticated user creates a comment
        /// - Only owner can edit/delete the comment ( NOT IMPLEMENTED YET)
        /// - Displayed with comment to show authorship
        /// - Used in authorization policies and ownership verification
        /// 
        /// </summary>
        public string? OwnerId { get; set; }
    }
}
