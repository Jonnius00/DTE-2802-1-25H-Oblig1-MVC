namespace DTE_2802_1_25H_Oblig1_MVC.Models
{
    /// <summary>
    /// the mid-level entity - belongs to a blog and contains multiple comments.
    /// 
    /// Business Rules:
    /// - Each post must belong to exactly one blog (BlogId is required)
    /// - Full CRUD operations are supported (requirement #4: CREATE, READ, UPDATE, DELETE)
    /// - Only the post owner can edit or delete the post (requirement #5: ownership control)
    /// - Posts can only be created in "open" blogs (requirement #6: blog open/close feature)
    /// - Deleting a post cascades to delete all its comments (requirement #5: cascade delete)
    /// 
    /// Entity Relationships:
    /// - Many Posts belong to one Blog (N:1 relationship via BlogId foreign key)
    /// - One Post can have many Comments (1:N relationship)
    /// - Navigation properties: Blog (parent) and Comments (children)
    /// 
    /// </summary>
    public class Post
    {
      /// <summary>
      /// 
      /// Primary key identifier for the post.
      /// Auto-generated by EF Core when creating new posts.
      /// Used in routing (/Post/Details/{id}) and for DB relationships.
      /// 
      /// </summary>
      public int Id { get; set; }
        
      /// <summary>
      /// 
      /// Nullable to allow flexible data entry, but typically required in UI validation.
      /// 
      /// </summary>
      public string? Title { get; set; }
        
      /// <summary>
      /// 
      /// The main content/body text of the post.
      /// Displayed on the post details page above the comments section.
      /// 
      /// </summary>
      public string? Content { get; set; }

      /// <summary>
      /// 
      /// Required field - every post must belong to exactly one blog.
      /// 
      /// Business Logic:
      /// - Used to filter posts by blog (blog.Posts)
      /// - Validates that posts are only created in existing blogs
      /// - Enforces blog open/close restrictions during post creation
      /// 
      /// Database Relationship:
      /// - References Blog.Id as foreign key to its parent blog
      /// - Cascade delete: if blog is deleted, all posts are deleted
      /// 
      /// </summary>
      public int BlogId { get; set; }

      /// <summary>
      /// 
      /// Navigation property to access the parent blog of this post.
      /// - post.Blog.Title - Get the title of the blog containing this post
      /// - post.Blog.IsOpen - Check if the parent blog allows new content       
      /// 
      /// EF Core uses this for relationship navigation and eager loading.
      /// - Include(p => p.Blog) - Eager load blog data with post queries        
      ///  
      /// Nullable to support various loading scenarios and lazy loading.
      /// 
      /// </summary>
      public Blog? Blog { get; set; }
        
      /// <summary>
      /// 
      /// Navigation property to access all comments belonging to this post.
      /// EF Core uses this for lazy loading and relationship management.
      /// 
      /// Business Logic:
      /// - Displays all comments on the post details page (requirement #3)
      /// - Used for cascade delete: deleting post removes all comments
      /// - Comments are ordered by creation date (typically newest first)
      /// 
      /// </summary>
      public ICollection<Comment>? Comments { get; set; }

      /// <summary>
      /// Identifier of the user who created this post.
      /// Links to ASP.NET Core Identity User.Id for ownership tracking.
      /// 
      /// Business Rules:
      /// - Set automatically when authenticated user creates a post
      /// - Can be Displayed on post details to show authorship ( not implemented yet )
      /// - Used in authorization policies and ownership verification: 
      ///   only owner can edit/delete the post (requirement #5)
      /// 
      /// Security Implementation (see PostController.cs ):
      /// - Controllers check User.Identity.Name against this property
      /// - Edit/Delete actions return Forbid() if user is not the owner
      /// - Prevents unauthorized modification of posts
      /// </summary>
      public string? OwnerId { get; set; }
    }
}
