namespace DTE_2802_1_25H_Oblig1_MVC.Models
{
    /// <summary>
    /// Represents a blog entity in the blogging system.
    /// This is the top-level container entity that holds multiple posts.
    /// 
    /// Business Rules:
    /// - Each blog has a title and description for identification
    /// - IsOpen property controls whether new posts/comments can be added
    /// - OwnerId tracks the user who created the blog (requirement #1: ownership tracking)
    /// - Only CREATE and READ operations are required (requirement #4: CR for blogs)
    /// 
    /// Entity Relationships:
    /// - One Blog can contain many Posts (1:N relationship)
    /// - Navigation property: Posts collection for accessing related posts
    /// 
    /// </summary>
    public class Blog
    {
        /// <summary>
        /// Primary key identifier for the blog.
        /// Auto-generated by Entity Framework when creating new blogs.
        /// </summary>
        public int Id { get; set; }
        
        /// <summary>
        /// Nullable to allow flexible data entry, but typically required in UI.
        /// </summary>
        public string? Title { get; set; }
        
        /// <summary>
        /// Optional field that provides additional context about the blog.
        /// </summary>
        public string? Description { get; set; }
        
        /// <summary>
        /// Controls whether new posts and comments can be added to this blog.
        /// </summary>
        public bool IsOpen { get; set; }

        /// <summary>
        /// Navigation property to access all posts belonging to this blog.
        /// Entity Framework uses this for lazy loading and relationship management.
        /// Nullable to support lazy or eager loading.
        /// 
        /// Usage in Code:
        /// - blog.Posts.Count() - Get number of posts in the blog
        /// - blog.Posts.Where(...) - Filter posts within the blog
        /// - Include(b => b.Posts) - Eager load posts with the blog query
        /// 
        /// </summary>
        public ICollection<Post>? Posts { get; set; }

        /// <summary>
        /// Identifier of the user who created this blog.
        /// Links to ASP.NET Core Identity User.Id for ownership tracking.
        /// 
        /// Business Rules:
        /// - Set automatically when authenticated user creates a blog (requirement #1)
        /// - Used for ownership verification in authorization scenarios
        /// - Although blog editing isn't required, this field enables future functionality
        /// 
        /// </summary>
        public string? OwnerId { get; set; }
    }
}